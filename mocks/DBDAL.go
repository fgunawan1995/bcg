// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	model "github.com/fgunawan1995/bcg/model"
	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"

	util "github.com/fgunawan1995/bcg/util"
)

// DBDAL is an autogenerated mock type for the DBDAL type
type DBDAL struct {
	mock.Mock
}

// GetDB provides a mock function with given fields:
func (_m *DBDAL) GetDB() *sqlx.DB {
	ret := _m.Called()

	var r0 *sqlx.DB
	if rf, ok := ret.Get(0).(func() *sqlx.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.DB)
		}
	}

	return r0
}

// GetItemByIDs provides a mock function with given fields: itemIDs
func (_m *DBDAL) GetItemByIDs(itemIDs []string) ([]model.Item, error) {
	ret := _m.Called(itemIDs)

	var r0 []model.Item
	if rf, ok := ret.Get(0).(func([]string) []model.Item); ok {
		r0 = rf(itemIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(itemIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemPromoByItemIDs provides a mock function with given fields: itemIDs
func (_m *DBDAL) GetItemPromoByItemIDs(itemIDs []string) ([]model.ItemPromo, error) {
	ret := _m.Called(itemIDs)

	var r0 []model.ItemPromo
	if rf, ok := ret.Get(0).(func([]string) []model.ItemPromo); ok {
		r0 = rf(itemIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ItemPromo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(itemIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPromoByIDs provides a mock function with given fields: promoIDs
func (_m *DBDAL) GetPromoByIDs(promoIDs []string) ([]model.Promo, error) {
	ret := _m.Called(promoIDs)

	var r0 []model.Promo
	if rf, ok := ret.Get(0).(func([]string) []model.Promo); ok {
		r0 = rf(promoIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Promo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(promoIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReduceItemStock provides a mock function with given fields: tx, itemID, qty
func (_m *DBDAL) ReduceItemStock(tx util.Transaction, itemID string, qty int32) error {
	ret := _m.Called(tx, itemID, qty)

	var r0 error
	if rf, ok := ret.Get(0).(func(util.Transaction, string, int32) error); ok {
		r0 = rf(tx, itemID, qty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
